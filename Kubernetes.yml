# kubernetes.yml
---
# Namespace para organizar los recursos (opcional pero recomendado)
apiVersion: v1
kind: Namespace
metadata:
  name: admin-core

---
# PersistentVolumeClaim para product-service
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: product-data-pvc
  namespace: admin-core
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
# PersistentVolumeClaim para inventory-service
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: inventory-data-pvc
  namespace: admin-core
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
# ConfigMap para configuraciones comunes de product-service
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
  namespace: admin-core
data:
  SPRING_PROFILES_ACTIVE: "k8s"
  SERVER_PORT: "8081"

---
# ConfigMap para configuraciones comunes de inventory-service
apiVersion: v1
kind: ConfigMap
metadata:
  name: inventory-service-config
  namespace: admin-core
data:
  SPRING_PROFILES_ACTIVE: "k8s"
  SERVER_PORT: "8082"
  PRODUCT_SERVICE_URL: "http://product-service:8081/api/products"

---
# Secret para las claves API (manera m√°s segura que usar environment variables directas)
apiVersion: v1
kind: Secret
metadata:
  name: service-secrets
  namespace: admin-core
type: Opaque
data:
  # Los valores deben estar codificados en base64
  # echo -n 'PRODUCT_SERVICE_KEY' | base64
  PRODUCT_SERVICE_API_KEY: UExPQkRPX1NFUlZJQ0VfS0VZ # PRODUCT_SERVICE_KEY en base64
  # echo -n 'INVENTORY_SERVICE_KEY' | base64
  INVENTORY_SERVICE_API_KEY: SU5WRU5UT1JZX1NFUlZJQ0VfS0VZ # INVENTORY_SERVICE_KEY en base64

---
# Deployment para product-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: admin-core
  labels:
    app: product-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
        - name: product-service
          image: product-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
          env:
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: product-service-config
                  key: SPRING_PROFILES_ACTIVE
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: product-service-config
                  key: SERVER_PORT
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: service-secrets
                  key: PRODUCT_SERVICE_API_KEY
          volumeMounts:
            - name: product-data-storage
              mountPath: /app/data
      volumes:
        - name: product-data-storage
          persistentVolumeClaim:
            claimName: product-data-pvc

---
# Service para product-service (ClusterIP - acceso interno)
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: admin-core
  labels:
    app: product-service
spec:
  selector:
    app: product-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081

---
# Deployment para inventory-service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  namespace: admin-core
  labels:
    app: inventory-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: inventory-service
  template:
    metadata:
      labels:
        app: inventory-service
    spec:
      containers:
        - name: inventory-service
          image: inventory-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
          env:
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: inventory-service-config
                  key: SPRING_PROFILES_ACTIVE
            - name: SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: inventory-service-config
                  key: SERVER_PORT
            - name: PRODUCT_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  name: inventory-service-config
                  key: PRODUCT_SERVICE_URL
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: service-secrets
                  key: INVENTORY_SERVICE_API_KEY
          volumeMounts:
            - name: inventory-data-storage
              mountPath: /app/data
      volumes:
        - name: inventory-data-storage
          persistentVolumeClaim:
            claimName: inventory-data-pvc

---
# Service para inventory-service (ClusterIP - acceso interno)
apiVersion: v1
kind: Service
metadata:
  name: inventory-service
  namespace: admin-core
  labels:
    app: inventory-service
spec:
  selector:
    app: inventory-service
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082

---
# Service para inventory-service (NodePort - acceso desde localhost)
# Descomenta este bloque si quieres acceder directamente desde localhost
# sin usar un Ingress (por ejemplo, http://localhost:30082)
apiVersion: v1
kind: Service
metadata:
  name: inventory-service-nodeport
  namespace: admin-core
spec:
  selector:
    app: inventory-service
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
      nodePort: 30082
  type: NodePort

---
# Service para product-service (NodePort - acceso desde localhost)
apiVersion: v1
kind: Service
metadata:
  name: product-service-nodeport
  namespace: admin-core
spec:
  selector:
    app: product-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30081
  type: NodePort